#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace miraclelock
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MiracleLock")]
	public partial class LockDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertRooms(Rooms instance);
    partial void UpdateRooms(Rooms instance);
    partial void DeleteRooms(Rooms instance);
    partial void InsertCards(Cards instance);
    partial void UpdateCards(Cards instance);
    partial void DeleteCards(Cards instance);
    #endregion
		
		public LockDbDataContext() : 
				base(global::miraclelock.Properties.Settings.Default.MiracleLockConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LockDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LockDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LockDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LockDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Rooms> Rooms
		{
			get
			{
				return this.GetTable<Rooms>();
			}
		}
		
		public System.Data.Linq.Table<Cards> Cards
		{
			get
			{
				return this.GetTable<Cards>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rooms")]
	public partial class Rooms : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _Building;
		
		private System.Nullable<int> _Floor;
		
		private System.Nullable<int> _Room;
		
		private string _HumanRoomNumber;
		
		private System.Nullable<int> _State;
		
		private System.Xml.Linq.XElement _Shape;
		
		private EntitySet<Cards> _Cards;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBuildingChanging(System.Nullable<int> value);
    partial void OnBuildingChanged();
    partial void OnFloorChanging(System.Nullable<int> value);
    partial void OnFloorChanged();
    partial void OnRoomChanging(System.Nullable<int> value);
    partial void OnRoomChanged();
    partial void OnHumanRoomNumberChanging(string value);
    partial void OnHumanRoomNumberChanged();
    partial void OnStateChanging(System.Nullable<int> value);
    partial void OnStateChanged();
    partial void OnShapeChanging(System.Xml.Linq.XElement value);
    partial void OnShapeChanged();
    #endregion
		
		public Rooms()
		{
			this._Cards = new EntitySet<Cards>(new Action<Cards>(this.attach_Cards), new Action<Cards>(this.detach_Cards));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Building", DbType="Int")]
		public System.Nullable<int> Building
		{
			get
			{
				return this._Building;
			}
			set
			{
				if ((this._Building != value))
				{
					this.OnBuildingChanging(value);
					this.SendPropertyChanging();
					this._Building = value;
					this.SendPropertyChanged("Building");
					this.OnBuildingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Floor", DbType="Int")]
		public System.Nullable<int> Floor
		{
			get
			{
				return this._Floor;
			}
			set
			{
				if ((this._Floor != value))
				{
					this.OnFloorChanging(value);
					this.SendPropertyChanging();
					this._Floor = value;
					this.SendPropertyChanged("Floor");
					this.OnFloorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Room", DbType="Int")]
		public System.Nullable<int> Room
		{
			get
			{
				return this._Room;
			}
			set
			{
				if ((this._Room != value))
				{
					this.OnRoomChanging(value);
					this.SendPropertyChanging();
					this._Room = value;
					this.SendPropertyChanged("Room");
					this.OnRoomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HumanRoomNumber", DbType="NChar(6)")]
		public string HumanRoomNumber
		{
			get
			{
				return this._HumanRoomNumber;
			}
			set
			{
				if ((this._HumanRoomNumber != value))
				{
					this.OnHumanRoomNumberChanging(value);
					this.SendPropertyChanging();
					this._HumanRoomNumber = value;
					this.SendPropertyChanged("HumanRoomNumber");
					this.OnHumanRoomNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="Int")]
		public System.Nullable<int> State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shape", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement Shape
		{
			get
			{
				return this._Shape;
			}
			set
			{
				if ((this._Shape != value))
				{
					this.OnShapeChanging(value);
					this.SendPropertyChanging();
					this._Shape = value;
					this.SendPropertyChanged("Shape");
					this.OnShapeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rooms_Cards", Storage="_Cards", ThisKey="Id", OtherKey="RoomId")]
		public EntitySet<Cards> Cards
		{
			get
			{
				return this._Cards;
			}
			set
			{
				this._Cards.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cards(Cards entity)
		{
			this.SendPropertyChanging();
			entity.Rooms = this;
		}
		
		private void detach_Cards(Cards entity)
		{
			this.SendPropertyChanging();
			entity.Rooms = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cards")]
	public partial class Cards : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Card;
		
		private System.Nullable<int> _RoomId;
		
		private System.Nullable<System.DateTime> _Ci;
		
		private System.Nullable<System.DateTime> _Co;
		
		private string _Holder;
		
		private EntityRef<Rooms> _Rooms;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCardChanging(string value);
    partial void OnCardChanged();
    partial void OnRoomIdChanging(System.Nullable<int> value);
    partial void OnRoomIdChanged();
    partial void OnCiChanging(System.Nullable<System.DateTime> value);
    partial void OnCiChanged();
    partial void OnCoChanging(System.Nullable<System.DateTime> value);
    partial void OnCoChanged();
    partial void OnHolderChanging(string value);
    partial void OnHolderChanged();
    #endregion
		
		public Cards()
		{
			this._Rooms = default(EntityRef<Rooms>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Card", DbType="NChar(10)")]
		public string Card
		{
			get
			{
				return this._Card;
			}
			set
			{
				if ((this._Card != value))
				{
					this.OnCardChanging(value);
					this.SendPropertyChanging();
					this._Card = value;
					this.SendPropertyChanged("Card");
					this.OnCardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomId", DbType="Int")]
		public System.Nullable<int> RoomId
		{
			get
			{
				return this._RoomId;
			}
			set
			{
				if ((this._RoomId != value))
				{
					if (this._Rooms.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIdChanging(value);
					this.SendPropertyChanging();
					this._RoomId = value;
					this.SendPropertyChanged("RoomId");
					this.OnRoomIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ci", DbType="DateTime")]
		public System.Nullable<System.DateTime> Ci
		{
			get
			{
				return this._Ci;
			}
			set
			{
				if ((this._Ci != value))
				{
					this.OnCiChanging(value);
					this.SendPropertyChanging();
					this._Ci = value;
					this.SendPropertyChanged("Ci");
					this.OnCiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Co", DbType="DateTime")]
		public System.Nullable<System.DateTime> Co
		{
			get
			{
				return this._Co;
			}
			set
			{
				if ((this._Co != value))
				{
					this.OnCoChanging(value);
					this.SendPropertyChanging();
					this._Co = value;
					this.SendPropertyChanged("Co");
					this.OnCoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Holder", DbType="NVarChar(50)")]
		public string Holder
		{
			get
			{
				return this._Holder;
			}
			set
			{
				if ((this._Holder != value))
				{
					this.OnHolderChanging(value);
					this.SendPropertyChanging();
					this._Holder = value;
					this.SendPropertyChanged("Holder");
					this.OnHolderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rooms_Cards", Storage="_Rooms", ThisKey="RoomId", OtherKey="Id", IsForeignKey=true)]
		public Rooms Rooms
		{
			get
			{
				return this._Rooms.Entity;
			}
			set
			{
				Rooms previousValue = this._Rooms.Entity;
				if (((previousValue != value) 
							|| (this._Rooms.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rooms.Entity = null;
						previousValue.Cards.Remove(this);
					}
					this._Rooms.Entity = value;
					if ((value != null))
					{
						value.Cards.Add(this);
						this._RoomId = value.Id;
					}
					else
					{
						this._RoomId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Rooms");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
